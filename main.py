import os
from fastapi import FastAPI, Request
from telegram import Update, Bot
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes
)
from dotenv import load_dotenv

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_SECRET_PATH = os.getenv("WEBHOOK_SECRET_PATH")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
CHAT_ID = int(os.getenv("CHAT_ID"))

app = FastAPI()
bot = Bot(token=BOT_TOKEN)

application = (
    ApplicationBuilder()
    .token(BOT_TOKEN)
    .build()
)

# –ö–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

async def signal_pepe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìà –°–∏–≥–Ω–∞–ª –ø–æ PEPE: –∂–¥–∏—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")

async def signal_xrp(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìà –°–∏–≥–Ω–∞–ª –ø–æ XRP: –∂–¥–∏—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")

async def signal_trx(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìà –°–∏–≥–Ω–∞–ª –ø–æ TRX: –∂–¥–∏—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")

async def signal_ena(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìà –°–∏–≥–Ω–∞–ª –ø–æ ENA: –∂–¥–∏—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")

async def portfolio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üíº –í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å: —Å–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.")

async def alert_on(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã.")

async def alert_off(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã.")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
application.add_handler(CommandHandler("start", start))
application.add_handler(CommandHandler("signal_pepe", signal_pepe))
application.add_handler(CommandHandler("signal_xrp", signal_xrp))
application.add_handler(CommandHandler("signal_trx", signal_trx))
application.add_handler(CommandHandler("signal_ena", signal_ena))
application.add_handler(CommandHandler("portfolio", portfolio))
application.add_handler(CommandHandler("alert_on", alert_on))
application.add_handler(CommandHandler("alert_off", alert_off))

@app.post(f"/{WEBHOOK_SECRET_PATH}")
async def telegram_webhook(req: Request):
    data = await req.json()
    update = Update.de_json(data, bot)
    await application.update_queue.put(update)
    return {"ok": True}

@app.on_event("startup")
async def on_startup():
    await application.initialize()
    await bot.set_webhook(url=WEBHOOK_URL + f"/{WEBHOOK_SECRET_PATH}")
    await application.start()
    print("‚úÖ Bot started with Webhook")

@app.on_event("shutdown")
async def on_shutdown():
    await application.stop(
